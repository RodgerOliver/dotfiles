[include]
	path = ~/.gitconfig.user
[core]
	editor = vim
	commitGraph = true
	pager = less -x1,4
[diff]
	tool = vimdiff
	algorithm = patience
	indentHeuristic = true
[difftool]
	prompt = 0
[merge]
	tool = vimdiff
	conflictstyle = diff3
[fetch]
	writeCommitGraph = true
	prune = true
[alias]
	ck = checkout
	a = add
	c = commit
	ca = commit -a
	cm = commit -m
	cam = commit -am
	cmm = commit --amend --no-edit
	camm = commit -a --amend --no-edit
	chr = cherry-pick
	st = status
	ps = push
	; ps branch and set upstream (first push)
	psu = "!git push -u origin $(git rev-parse --abbrev-ref HEAD)"
	pl = pull
	b = branch
	ba = branch -avv
	f = fetch
	fa = fetch --all
	m = merge
	sh = stash
	s = show
	sm = show -m
	so = show --name-only
	; show files changed between master and a commit
	sf = "!f() { \
		branch=$1; \
		test -z $branch && branch=HEAD; \
		git diff --name-only --oneline master...$branch; \
	}; f"
	d = diff
	ds = diff --cached
	lo = log --decorate --oneline --graph
	ls = "log --pretty=format:'%C(yellow)%h %C(green)%an %C(auto)%d' --graph"
	l  = "log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ar %C(auto)%d' --graph"
	lt = "log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ad %C(auto)%d' --graph"
	ld = "log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ai %C(auto)%d' --graph"
	ll = "log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ar %C(auto)%d' --graph --all"
	; show commits of an unmerged branch in master
	lb = "!f() { \
		branch=$1; \
		test -z $branch && branch=HEAD; \
		git log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ar %C(auto)%d' --graph master..$branch; \
	}; f"
	; show commits of a merged branch in master (only if it has one merge on master)
	lbm = "!f() { \
		commit=$(git log master --merges --first-parent | grep $(git rev-parse HEAD | cut -c1-5) | awk '{print $2}'); \
		git log --pretty=format:'%C(yellow)%h %C(green)%an %C(reset)%s %C(blue)%ar %C(auto)%d' --graph $commit..HEAD; \
	}; f"
	; send commit to deploy server
	pud = "!f() { \
		branch=$1; \
		test -z $branch && branch=HEAD; \
		git push -f deploy $branch:master; \
	}; f"
	; send working directory to deploy server
	debug = "!f() { \
		num=$(ps aux | grep 'git pud' | wc -l); \
		test $num -gt 4 && echo 'Already debugging' && exit; \
		git add -A && git commit --allow-empty -m 'debug' && git pud && git reset --mixed HEAD~1; \
	}; f"
	hide = update-index --skip-worktree
	unhide = update-index --no-skip-worktree
	unhide-all = ! git ls-files -v | grep -i ^S | cut -c 3- | xargs git update-index --no-skip-worktree
	hidden = ! git ls-files -v | grep '^S' | cut -c3-
